The issue occurs because SQL Server uses schemas (like dbo), while MySQL treats schemas as databases. When you migrate a SQL Server database using AWS DMS (or similar tools), the default schema (dbo) is being interpreted as a database name in MySQL, which is why you're seeing a dbo database created on the target.


---

Why This Happens

SQL Server: Uses schemas to logically group tables within a single database.

Example: A table named dbo.Employees in SQL Server is stored within the dbo schema of a database, e.g., MyDatabase.


MySQL: Does not support schemas in the same way. Instead, each schema in SQL Server is typically translated into a separate MySQL database.


By default, AWS DMS and other migration tools interpret dbo (or other schema names) as a new database unless explicitly mapped otherwise.


---

Fixes for the Issue

1. Map Schema to Target Database

To avoid creating a dbo database in MySQL, you need to explicitly map the schema to the target database. This can be done using the schema mapping settings in your migration task.

Updated Schema Mapping

In the DMS task, modify the schema mappings to direct all tables under dbo into a specific database (e.g., target_database_name):

{
  "rules": [
    {
      "rule-type": "selection",
      "rule-id": "1",
      "rule-name": "1",
      "object-locator": {
        "schema-name": "dbo",
        "table-name": "%"
      },
      "rule-action": "include"
    },
    {
      "rule-type": "transformation",
      "rule-id": "2",
      "rule-name": "2",
      "rule-target": "schema",
      "object-locator": {
        "schema-name": "dbo"
      },
      "rule-action": "rename",
      "value": "target_database_name"
    }
  ]
}

Rule 1: Includes all tables in the dbo schema.

Rule 2: Maps the dbo schema to the desired target database name in MySQL.



---

2. Use Wildcard for Multiple Schemas

If your SQL Server database has multiple schemas (e.g., dbo, hr, sales), map all schemas to the same MySQL database:

{
  "rules": [
    {
      "rule-type": "selection",
      "rule-id": "1",
      "rule-name": "1",
      "object-locator": {
        "schema-name": "%",
        "table-name": "%"
      },
      "rule-action": "include"
    },
    {
      "rule-type": "transformation",
      "rule-id": "2",
      "rule-name": "2",
      "rule-target": "schema",
      "object-locator": {
        "schema-name": "%"
      },
      "rule-action": "rename",
      "value": "target_database_name"
    }
  ]
}


---

3. Combine All Schemas into One Database

If you prefer to merge all schemas into a single MySQL database (e.g., MyDatabase), use the following:

{
  "rules": [
    {
      "rule-type": "selection",
      "rule-id": "1",
      "rule-name": "1",
      "object-locator": {
        "schema-name": "%",
        "table-name": "%"
      },
      "rule-action": "include"
    },
    {
      "rule-type": "transformation",
      "rule-id": "2",
      "rule-name": "2",
      "rule-target": "schema",
      "object-locator": {
        "schema-name": "%"
      },
      "rule-action": "rename",
      "value": "MyDatabase"
    }
  ]
}


---

4. Verify Results

After updating the task:

1. Run the migration task and check the target MySQL database to ensure all tables are created in the desired database (e.g., MyDatabase) instead of a dbo database.


2. If the mapping is correct, tables like dbo.Employees in SQL Server should appear as MyDatabase.Employees in MySQL.




---

Testing

Before running the migration on the full database, test it with a smaller subset of tables to verify that schema mapping works as expected.


Let me know if you encounter further issues!

